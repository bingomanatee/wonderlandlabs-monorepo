Object.defineProperty(exports,"__esModule",{value:!0}),exports.Tree=void 0;let enums_1=require("./helpers/enums"),BranchMap_1=require("./BranchMap"),Leaf_1=require("./Leaf"),isTreeSet_1=require("./helpers/isTreeSet"),isTreeDel_1=require("./helpers/isTreeDel"),constants_1=require("./constants");class Tree{constructor(e){this.activeScopeCauseIDs=new Set;var{forest:t,name:s,data:r}=e;this.forest=t,this.name=s,this.dataType=e.dataType||enums_1.DataType_s.map,r&&(this.root=new BranchMap_1.BranchMap(this,{data:r,cause:enums_1.Action_s.init}))}endScope(e){let t=this.top;for(;t;){if(t.causeID===e){t.pop();break}t=t.next}this.activeScopeCauseIDs.delete(e)}pruneScope(e){let t=this.root;for(;t;){if(t.causeID===e){t.prune();break}t=t.next}this.activeScopeCauseIDs.delete(e)}get size(){let s=new Set,e=this.root;for(;e;)e.forEach((e,t)=>s.add(t)),e=e.next;return s.size}values(){switch(this.dataType){case enums_1.DataType_s.map:return this.root?this.root.values():new Map;case enums_1.DataType_s.object:return this.root?this.root.values():{};default:throw new Error("cannot manage type")}}clearValues(){var e;return this.root?this.forest.currentScope?(e=new BranchMap_1.BranchMap(this,{cause:enums_1.Action_s.clear}),(this.top.next=e).cache=new Map,[]):(e=this.branches,this.root=void 0,e):[]}get branches(){var e=[];let t=this.root;for(;t;)e.push(t),t=t.next;return e}get top(){if(this.root){let e=this.root;for(;e&&e.next;)e=e.next;return e}}leaf(e){return this.root?this.root.leaf(e):new Leaf_1.Leaf({treeName:this.name,key:e,val:constants_1.NOT_FOUND})}get(e){if(this.root)return this.top?.get(e)}has(e){return!!this.root&&!!this.top?.has(e)}maybeCache(){var e=this.top;e&&(this.count(this.forest.cacheInterval)>=this.forest.cacheInterval&&(e.cache=e.mergedData()),e.prev?.clearCache())}count(e=-1){let t=0,s=this.top;for(;s&&(t+=1,s=s.prev,!(0<=e&&t>=e)););return t}pushCurrentScope(){var e;this.forest.currentScope&&!this.forest.currentScope.inTrees.has(this.name)&&(this.forest.currentScope?.inTrees.add(this.name),e=new BranchMap_1.BranchMap(this,{cause:enums_1.Action_s.trans,causeID:this.forest.currentScope.scopeID}),this.top?(0,BranchMap_1.linkBranches)(this.top,e):this.root=e)}set(e,t){if(this.forest.currentScope&&this.pushCurrentScope(),this.root)this.top?.set(e,t);else switch(this.dataType){case enums_1.DataType_s.map:this.root=new BranchMap_1.BranchMap(this,{data:new Map([[e,t]]),cause:enums_1.Action_s.set});break;case enums_1.DataType_s.object:throw new Error("not implemented");default:throw new Error("bad dataType")}}del(e){if(this.root&&this.top?.has(e))return this.forest.currentScope&&this.pushCurrentScope(),this.top?.del(e)}get status(){return enums_1.Status_s.good}change(e){if((0,isTreeSet_1.isTreeSet)(e))this.set(e.key,e.val);else{if(!(0,isTreeDel_1.isTreeDel)(e))throw new Error("not implemented");this.del(e.key)}return{treeName:this.name,change:e,status:this.status}}}exports.Tree=Tree;