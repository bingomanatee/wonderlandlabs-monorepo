{"version":3,"file":"Forest.js","sources":["../../src/Stores/Forest.ts"],"sourcesContent":["import { Store } from './Store';\nimport {\n  ActionExposedRecord,\n  Path,\n  StoreParams,\n  StoreBranch,\n  ForestMessage,\n  BranchParams,\n} from '../types';\nimport { Subject } from 'rxjs';\nimport { pathString } from '../lib/combinePaths';\nimport { produce } from 'immer';\nimport { ForestBranch } from './ForestBranch';\nimport { setPath } from '../lib/path';\nimport asError from '../lib/asError';\n\nexport class Forest<\n    DataType,\n    Actions extends ActionExposedRecord = ActionExposedRecord,\n  >\n  extends Store<DataType, Actions>\n  implements StoreBranch<DataType, Actions>\n{\n  constructor(p: StoreParams<DataType, Actions>) {\n    super(p);\n  }\n\n  path: Path = [];\n  parent?: StoreBranch<unknown> = null;\n  isRoot = true;\n\n  get root() {\n    return this;\n  }\n\n  public broadcast(message: unknown, fromRoot?: boolean) {\n    if (fromRoot || this.isRoot) {\n      this.receiver.next(message);\n    }\n    if (this.parent) {\n      this.parent.broadcast(message);\n    }\n  }\n\n  public receiver = new Subject();\n\n  // Override complete to handle forest-wide completion\n  complete(): DataType {\n    if (!this.isActive) {\n      return this.value;\n    }\n\n    // Send completion message to all branches before completing\n    const completionMessage: ForestMessage = {\n      type: 'complete',\n      timestamp: Date.now(),\n    };\n    this.broadcast(completionMessage, true);\n\n    // Complete the receiver subject\n    this.receiver.complete();\n\n    // Call parent complete method\n    return super.complete();\n  }\n\n  // Override next to implement validation messaging system\n  next(value: Partial<DataType>) {\n    // Prevent concurrent validation\n    if (this.hasPending()) {\n      throw new Error(\n        'Cannot start new validation while another validation is in progress',\n      );\n    }\n\n    // Apply prep function if it exists to transform partial input to complete data\n    const preparedValue = this.prep\n      ? this.prep(value, this.value!)\n      : (value as DataType);\n\n    // First validate using Store's validation\n    const { isValid, error } = this.validate(preparedValue);\n    if (!isValid) {\n      if (this.debug) {\n        console.error(`cannot update ${this.name} with `, preparedValue, error);\n      }\n      throw asError(error);\n    }\n\n    this.setPending(preparedValue);\n\n    try {\n      this.#validatePending(preparedValue);\n    } finally {\n      this.clearPending();\n    }\n    super.next(preparedValue);\n  }\n\n  #validatePending(preparedValue: DataType) {\n    // Step 1: Create transient listener for validation failures\n    let validationError: string | null = null;\n    const transientSub = this.receiver.subscribe((message: any) => {\n      if (message && message.type === 'validation-failure') {\n        validationError = `Branch ${pathString(message.branchPath)}: ${message.error}`;\n      }\n    });\n\n    try {\n      // Step 2: Send setPending message to all branches\n      const setPendingMessage: ForestMessage = {\n        type: 'set-pending',\n        payload: preparedValue,\n        timestamp: Date.now(),\n      };\n      this.broadcast(setPendingMessage, true);\n\n      const validateMessage: ForestMessage = {\n        type: 'validate-all',\n        timestamp: Date.now(),\n      };\n      this.broadcast(validateMessage, true);\n      if (validationError) {\n        if (this.debug) {\n          console.error('Branch validation failed:', validationError);\n        }\n        throw new Error(`Validation failed: ${validationError}`);\n      }\n    } finally {\n      transientSub.unsubscribe();\n    }\n  }\n\n  set(path: Path, value: unknown): boolean {\n    const pathArray = Array.isArray(path) ? path : pathString(path).split('.');\n    const newValue = produce(this.value, (draft) => {\n      // Use Immer to safely set nested values\n      setPath(draft, pathArray, value);\n    });\n    return this.next(newValue);\n  }\n\n  branch<Type, BranchActions extends ActionExposedRecord = ActionExposedRecord>(\n    path: Path,\n    params: BranchParams<Type, BranchActions>,\n  ) {\n    const name = this.name + '.' + pathString(path);\n    return new ForestBranch<Type, BranchActions>(\n      {\n        name,\n        ...params,\n      },\n      path,\n      this,\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAgBO,MAAM,eAIH,MAEV;AAAA,EACE,YAAY,GAAmC;AAC7C,UAAM,CAAC;AAAA,EACT;AAAA,EAEA,OAAa,CAAA;AAAA,EACb,SAAgC;AAAA,EAChC,SAAS;AAAA,EAET,IAAI,OAAO;AACT,WAAO;AAAA,EACT;AAAA,EAEO,UAAU,SAAkB,UAAoB;AACrD,QAAI,YAAY,KAAK,QAAQ;AAC3B,WAAK,SAAS,KAAK,OAAO;AAAA,IAC5B;AACA,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,UAAU,OAAO;AAAA,IAC/B;AAAA,EACF;AAAA,EAEO,WAAW,IAAI,QAAA;AAAA;AAAA,EAGtB,WAAqB;AACnB,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO,KAAK;AAAA,IACd;AAGA,UAAM,oBAAmC;AAAA,MACvC,MAAM;AAAA,MACN,WAAW,KAAK,IAAA;AAAA,IAAI;AAEtB,SAAK,UAAU,mBAAmB,IAAI;AAGtC,SAAK,SAAS,SAAA;AAGd,WAAO,MAAM,SAAA;AAAA,EACf;AAAA;AAAA,EAGA,KAAK,OAA0B;AAE7B,QAAI,KAAK,cAAc;AACrB,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAGA,UAAM,gBAAgB,KAAK,OACvB,KAAK,KAAK,OAAO,KAAK,KAAM,IAC3B;AAGL,UAAM,EAAE,SAAS,MAAA,IAAU,KAAK,SAAS,aAAa;AACtD,QAAI,CAAC,SAAS;AACZ,UAAI,KAAK,OAAO;AACd,gBAAQ,MAAM,iBAAiB,KAAK,IAAI,UAAU,eAAe,KAAK;AAAA,MACxE;AACA,YAAM,QAAQ,KAAK;AAAA,IACrB;AAEA,SAAK,WAAW,aAAa;AAE7B,QAAI;AACF,WAAK,iBAAiB,aAAa;AAAA,IACrC,UAAA;AACE,WAAK,aAAA;AAAA,IACP;AACA,UAAM,KAAK,aAAa;AAAA,EAC1B;AAAA,EAEA,iBAAiB,eAAyB;AAExC,QAAI,kBAAiC;AACrC,UAAM,eAAe,KAAK,SAAS,UAAU,CAAC,YAAiB;AAC7D,UAAI,WAAW,QAAQ,SAAS,sBAAsB;AACpD,0BAAkB,UAAU,WAAW,QAAQ,UAAU,CAAC,KAAK,QAAQ,KAAK;AAAA,MAC9E;AAAA,IACF,CAAC;AAED,QAAI;AAEF,YAAM,oBAAmC;AAAA,QACvC,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW,KAAK,IAAA;AAAA,MAAI;AAEtB,WAAK,UAAU,mBAAmB,IAAI;AAEtC,YAAM,kBAAiC;AAAA,QACrC,MAAM;AAAA,QACN,WAAW,KAAK,IAAA;AAAA,MAAI;AAEtB,WAAK,UAAU,iBAAiB,IAAI;AACpC,UAAI,iBAAiB;AACnB,YAAI,KAAK,OAAO;AACd,kBAAQ,MAAM,6BAA6B,eAAe;AAAA,QAC5D;AACA,cAAM,IAAI,MAAM,sBAAsB,eAAe,EAAE;AAAA,MACzD;AAAA,IACF,UAAA;AACE,mBAAa,YAAA;AAAA,IACf;AAAA,EACF;AAAA,EAEA,IAAI,MAAY,OAAyB;AACvC,UAAM,YAAY,MAAM,QAAQ,IAAI,IAAI,OAAO,WAAW,IAAI,EAAE,MAAM,GAAG;AACzE,UAAM,WAAW,QAAQ,KAAK,OAAO,CAAC,UAAU;AAE9C,cAAQ,OAAO,WAAW,KAAK;AAAA,IACjC,CAAC;AACD,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AAAA,EAEA,OACE,MACA,QACA;AACA,UAAM,OAAO,KAAK,OAAO,MAAM,WAAW,IAAI;AAC9C,WAAO,IAAI;AAAA,MACT;AAAA,QACE;AAAA,QACA,GAAG;AAAA,MAAA;AAAA,MAEL;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AACF;"}