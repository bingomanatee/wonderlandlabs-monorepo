"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.TreeClass=void 0;const collect_1=require("@wonderlandlabs/collect"),walrus_1=require("@wonderlandlabs/walrus"),lodash_1=require("lodash"),types_1=require("./types"),CollectionClass_1=__importDefault(require("./CollectionClass")),ErrorPlus_1=require("./ErrorPlus"),Leaf_1=require("./Leaf"),rxjs_1=require("rxjs"),JoinIndex_1=__importDefault(require("./JoinIndex"));function prefix(e){return"string"==typeof e?prefix([e]):e.map(e=>walrus_1.text.addBefore(e,"$value."))}class TreeClass{constructor(e,o){this.$collections=new Map,this.joins=new Map,this._indexes=new Map,this.updates=new rxjs_1.Subject,null!=e&&e.forEach(e=>this.addCollection(e)),null!=o&&o.forEach(e=>this.addJoin(e))}addCollection(e){if(!e.name)throw new Error("addCollection requires name");if(this.$collections.has(e.name))throw new Error("cannot redefine collection "+e.name);var o=null!=(o=e.records)?o:[];delete e.records,this.$collections.set(e.name,new CollectionClass_1.default(this,e,o)),this.updates.next({action:"add-collection",collection:e.name})}addJoin(e){if(this.joins.has(e.name))throw new ErrorPlus_1.ErrorPlus("cannot redefine existing join "+e.name,{join:e,tree:this});this.joins.set(e.name,e),this._indexes.set(e.name,new JoinIndex_1.default(this,e.name))}do(e){return e(this)}collection(e){if(this.$collections.has(e))return this.$collections.get(e);throw new ErrorPlus_1.ErrorPlus("cannot get collection",e)}get(e,o){return this.collection(e).get(o)}put(e,o){return this.collection(e).put(o)}query(e){return this.collection(e.collection).query(e)}fetch(e){return this.collection(e.collection).fetch(e)}findMatchingJoins(r,t){return(0,collect_1.c)(this.joins).getReduce((e,o)=>((o.from===r&&o.to===t||o.to===r&&o.from===t)&&e.push(o),e),[])}leaf(n,s,i){const l=new Leaf_1.Leaf(this,n,s);return null!=i&&i.joins&&i.joins.forEach(o=>{let r;if((0,types_1.isQueryNamedDefJoin)(o)){if(!this.joins.has(o.name))throw new ErrorPlus_1.ErrorPlus("cannot find query join "+o.name,o);if(!this._indexes.has(o.name))throw new ErrorPlus_1.ErrorPlus("no index for join "+o.name,o);r=this.joins.get(o.name)}else{if(!(0,types_1.isQueryCollectionDefJoin)(o))throw new ErrorPlus_1.ErrorPlus("join is not proper",o);var e=this.findMatchingJoins(n,o.collection);switch(e.length){case 0:throw new Error(`cannot find amy joins between ${n} and `+o.collection);case 1:r=e[0];break;default:throw new ErrorPlus_1.ErrorPlus(`there are two or more joins between ${n} and ${o.collection} -- you must name the specific join you want to use`,i)}}let t;try{t=this._indexes.get(r.name)}catch(e){throw console.log("---- error getting index for ",r,"from join",o),e}r.to===n?l.$joins[r.name]=t.toLeafsFor(s,o):l.$joins[r.name]=t.fromLeafsFor(s,o),o.sorter&&("function"==typeof o.sorter?l.$joins[r.name]=l.$joins[r.name].sort(o.sorter):l.$joins[r.name]=(0,lodash_1.sortBy)(l.$joins[r.name],prefix(o.sorter)))}),l}}exports.TreeClass=TreeClass;