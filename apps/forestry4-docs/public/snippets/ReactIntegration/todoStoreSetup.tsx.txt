const todoForest = useMemo(() => new Forest<TodoState>({
  name: 'todo-app',
  value: {
    todos: [
      { id: 1, text: 'Learn Forestry 4', completed: true },
      { id: 2, text: 'Build React app', completed: false },
    ],
    filter: 'all',
    newTodoText: ''
  },
  actions: {
    // Form handling with onChange
    onChange: function(value: TodoState, event: React.ChangeEvent<HTMLInputElement>) {
      const { name, value: fieldValue } = event.target;
      this.set(name, fieldValue);
    },

    // Add new todo
    addTodo: function(value: TodoState) {
      if (!value.newTodoText.trim()) return;

      const newTodo: TodoItem = {
        id: Date.now(),
        text: value.newTodoText.trim(),
        completed: false
      };

      this.next({
        ...value,
        todos: [...value.todos, newTodo],
        newTodoText: ''
      });
    },

    // Toggle todo completion
    toggleTodo: function(value: TodoState, id: number) {
      const updatedTodos = value.todos.map(todo =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      );
      this.set('todos', updatedTodos);
    },

    // Remove todo
    removeTodo: function(value: TodoState, id: number) {
      const filteredTodos = value.todos.filter(todo => todo.id !== id);
      this.set('todos', filteredTodos);
    },

    // Set filter
    setFilter: function(value: TodoState, filter: 'all' | 'active' | 'completed') {
      this.set('filter', filter);
    },
  },
  tests: [
    (value: TodoState) => value.newTodoText.length > 100 ? 'Todo text too long' : null,
  ]
}), [])
