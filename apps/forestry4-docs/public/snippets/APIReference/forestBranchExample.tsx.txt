// ForestBranch provides focused access to nested data
const appForest = new Forest({
  value: {
    users: {
      user1: { name: 'John', email: 'john@example.com', preferences: { theme: 'dark' } },
      user2: { name: 'Jane', email: 'jane@example.com', preferences: { theme: 'light' } }
    },
    settings: { appName: 'MyApp', version: '1.0.0' }
  }
})

// Create a branch for a specific user
const userBranch = appForest.branch(['users', 'user1'], {
  actions: {
    updateName(value, newName: string) {
      this.next({ ...value, name: newName })
    },
    updateTheme(value, theme: string) {
      this.next({ 
        ...value, 
        preferences: { ...value.preferences, theme } 
      })
    }
  }
})

// Branch properties
console.log(userBranch.path) // ['users', 'user1']
console.log(userBranch.isRoot) // false
console.log(userBranch.parent === appForest) // true
console.log(userBranch.root === appForest) // true

// Use branch actions - automatically updates parent
userBranch.$.updateName('Johnny')
userBranch.$.updateTheme('light')

// Parent forest is automatically updated
console.log(appForest.value.users.user1.name) // 'Johnny'
console.log(appForest.value.users.user1.preferences.theme) // 'light'

// Branch value reflects current state
console.log(userBranch.value.name) // 'Johnny'
