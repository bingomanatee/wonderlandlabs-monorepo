import { useEffect, useRef, useState } from 'react';
import type { StoreIF } from '@wonderlandlabs/forestry4';

/**
 * Hook for creating and managing Forest branches using modern subclass pattern
 * @param store - The parent Forest store
 * @param path - The path for the branch (e.g., 'username', 'email')
 * @param branchConfigFactory - Factory function that returns branch configuration with subclass
 * @param rest - Additional arguments passed to the branchConfigFactory
 * @returns [branchValue, branchStore] - The branch value and store instance
 */
export default function useForestBranch<ValueType>(
  store: StoreIF<any>,
  path: string,
  branchConfigFactory: (...args: any[]) => {
    subclass: new () => StoreIF<ValueType>;
    schema?: any;
  },
  ...rest: any[]
): [ValueType, StoreIF<ValueType>] {
  const branchRef = useRef<StoreIF<ValueType> | null>(null);

  // Create branch if it doesn't exist
  if (!branchRef.current && store && typeof (store as any)?.$branch === 'function') {
    const branchConfig = branchConfigFactory(...rest);
    branchRef.current = (store as any).$branch(path, branchConfig);
  } else if (!branchRef.current) {
    throw new Error('bad store ', store);
  }

  const [value, setValue] = useState<ValueType>(branchRef.current?.value);

  useEffect(() => {
    if (branchRef.current) {
      const sub = branchRef.current.subscribe(setValue);

      return () => {
        sub?.unsubscribe();
      };
    }
  }, [branchRef.current]);

  return [value ?? branchRef.current?.value, branchRef.current!];
}
