Object.defineProperty(exports,"__esModule",{value:!0}),exports.Branch=void 0,exports.linkBranches=linkBranches;let enums_1=require("./helpers/enums"),Leaf_1=require("./Leaf"),helpers_1=require("./helpers"),constants_1=require("./constants"),isTreeSet_1=require("./helpers/isTreeSet"),isTreeDel_1=require("./helpers/isTreeDel");function linkBranches(e,t){e&&(e.next=t),t&&(t.prev=e)}class Branch{constructor(e,t){this.tree=e,this.async=!1,this.cause=t.cause,t.causeID&&(this.causeID=t.causeID),this.status="status"in t?t.status:enums_1.StatusEnum.good,this.data=this._initData(t),t.prev&&(this.prev=t.prev),this.id=e.forest.nextBranchId()}destroy(){this.next=void 0,this.prev=void 0,this.data.clear(),this.cache?.clear(),this.causeID&&this.tree.activeScopeCauseIDs.has(this.causeID)&&this.tree.activeScopeCauseIDs.delete(this.causeID)}pop(){this==this.tree.root&&(this.tree.root=this.next),linkBranches(this.prev,this.next),this.destroy()}prune(){this==this.tree.root&&(this.tree.root=void 0);let e=this;for(var t;e;)t=e.next,e.destroy(),e=t}mergedData(){if(this.cache)return this.cache;let e=this;for(;e&&e.prev&&!e.cache;)e=e.prev;if(!e)return new Map;let s=new Map(e.cache||e.data),t=e.next;for(;t&&(t.cache?s=new Map(t.cache):t.data.forEach((e,t)=>{s.set(t,e)}),t!==this);)t=t.next;return s}values(s){return this.cache?s=new Map(this.cache):s?this.data.forEach((e,t)=>{s.set(t,e)}):s=new Map(this.data),this.next?this.next.values(s):s}_initData(e){return e.data||new Map}leaf(e){return this.data.has(e)?this.leafFactory(e,this.data.get(e)):this.prev?this.prev.leaf(e):this.leafFactory(e,constants_1.NOT_FOUND)}get(e){return this.data.has(e)?(0,helpers_1.delToUndef)(this.data.get(e)):this.cache?this.cache.has(e)?(0,helpers_1.delToUndef)(this.cache.get(e)):void 0:this.prev?(0,helpers_1.delToUndef)(this.prev.get(e)):void 0}leafFactory(e,t){return new Leaf_1.Leaf({treeName:this.tree.name,key:e,val:t,forest:this.tree.forest})}addBranch(e,t,s){if(this.next)throw new Error("cannot push on a non-terminal branch");e=new Branch(this.tree,{prev:this,data:(0,helpers_1.mp)(e,t),cause:s});return this.next=e}has(e){return!!this.data.has(e)||!!this.prev&&this.prev.has(e)}get forest(){return this.tree.forest}ensureCurrentScope(){if(this.forest.currentScope&&this.forest.currentScope.status===enums_1.StatusEnum.pending&&!this.tree.activeScopeCauseIDs.has(this.forest.currentScope.scopeID)){if(this.tree.top!=this.tree.top)return this.tree.top?.ensureCurrentScope();var e=this.forest["currentScope"];this.next=new Branch(this.tree,{cause:e.cause,status:e.status,causeID:e.scopeID,prev:this}),this.tree.activeScopeCauseIDs.add(e.scopeID),e.inTrees.add(this.tree.name)}}set(e,t){return this.tree.top.ensureCurrentScope(),this.next?this.next.set(e,t):(this.addBranch(e,t,enums_1.BranchActionEnum.set),this.next.get(e))}del(e){if(this.next)return this.next.del(e);this.addBranch(e,constants_1.DELETED,enums_1.ChangeTypeEnum.del)}change(e){if((0,isTreeSet_1.isTreeSet)(e))this.set(e.key,e.val);else{if(!(0,isTreeDel_1.isTreeDel)(e))throw new Error("cannot implement change "+e.type.toString());this.del(e.key)}return{treeName:e.treeName,change:e,status:enums_1.StatusEnum.good}}}exports.Branch=Branch;