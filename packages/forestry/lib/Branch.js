Object.defineProperty(exports,"__esModule",{value:!0}),exports.Branch=void 0;let ValueProviderContext_1=require("./types/ValueProviderContext"),types_guards_1=require("./types/types.guards");class Branch{tree;change;constructor(e,t){if(this.tree=e,this.change=t,!e||!t)throw new Error("unparameterized branch");this.time=t&&"time"in t?t.time:e.forest.nextTime}get cause(){return this.change.name}_next;get next(){return this._next}set next(e){if(this===e)throw new Error("next: cannot self recurse");if(e&&this.prev===e)throw new Error("next: prev: cannot self recurse loop");this._next=e}_prev;get prev(){return this._prev}set prev(e){if(this===e)throw new Error("prev: cannot self-recurse");if(e&&this.next===e)throw new Error("prev:next:cannot self recurse loop");this._prev=e}time;add(e){if(this.next)throw new Error("can only add at the end of a chain");e=new Branch(this.tree,e);return Branch.link(this,e),e}offshoots;_cached;_hasBeenCached=null;_cacheValue(e){this._cached=e,this._hasBeenCached=!0}get valueIsCached(){return!0===this._hasBeenCached}_flushCache(){var e=this._cached;return delete this._cached,this._hasBeenCached=null,e}clone(e){var t=this.tree.params?.serializer?this.tree.params.serializer({branch:this,tree:this.tree,context:ValueProviderContext_1.ValueProviderContext.truncation,value:this.value}):this.value,e=e?{assert:t,name:"cloned",time:this.time}:this.change,t=new Branch(this.tree,e);return t.prev=this.prev,t.next=this.next,t}get value(){if(!this.change)throw new Error("cannot get value of branch without change");if(this._hasBeenCached)return this!==this.tree.top?this._flushCache():this._cached;if((0,types_guards_1.isAssert)(this.change))return this.change.assert;var e;if((0,types_guards_1.isMutator)(this.change))return e=this.change.mutator({branch:this.prev,seed:this.change.seed,context:ValueProviderContext_1.ValueProviderContext.mutation,tree:this.tree,value:this.prev?.value}),!1!==this._hasBeenCached&&(this.tree.isUncacheable?this._hasBeenCached=!1:this===this.tree.top&&this._cacheValue(e)),e;throw console.warn("impossible changeType",this.change,(0,types_guards_1.isAssert)(this.change),(0,types_guards_1.isMutator)(this.change),this),new Error("impossible")}linkTo(e){return Branch.link(this,e)}static link(e,t){e&&(e.next=t),t&&(t.prev=e)}static unlink(e,t){e&&(e.next=void 0),t&&(t.prev=void 0)}toString(){return`branch ${this.time} of tree {${this.tree.name??"(anon)"}} - value = ${this.value} next=${this.next?this.next.time:"<null>"} prev=`+(this.prev?this.prev.time:"<null>")}destroy(){this.next=null,this.prev=null,this._cacheValue=void 0,this.tree=void 0,this.change=void 0}}exports.Branch=Branch;