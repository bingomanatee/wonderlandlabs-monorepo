Object.defineProperty(exports,"__esModule",{value:!0}),exports.Tree=void 0;let constants_1=require("./constants"),Branch_1=require("./Branch"),join_1=require("./join"),DEFAULT_INITIALIZER={name:"DEFAULT_INITIALIZER",delta:function(t,e){return e[0]}};class Tree{constructor(t,e,i){this.forest=t,this.name=e,this.trimmed=[],this.acts={},this.dataEngine=i.dataEngine;t=[i.val],i.validator&&(this.validator=i.validator),e=this.engine.actions.has(constants_1.ACTION_NAME_INITIALIZER)?this.engine.actions.get(constants_1.ACTION_NAME_INITIALIZER):DEFAULT_INITIALIZER;this.root=new Branch_1.Branch(this,e,t),this.acts=this.initActs()}get top(){let t=this.root;for(;t;){if(!t.next)return t;t=t.next}return t}get engine(){return this._engine||(this._engine=this.forest.dataEngine(this.dataEngine,this)),this._engine}get value(){return this.top.value}validate(){this.engine.validator&&this.engine.validator(this.value,this),this.validator&&this.validator(this)}do(e,...i){let n=this.engine.actions.get(e);return this.forest.transact(()=>{var t;if(n)return t=new Branch_1.Branch(this,n,i),(0,join_1.join)(this.top,t),this.validate(),t.value;throw new Error("engine "+this.dataEngine+" does not have an action "+e)})}initActs(){let i={};return this.engine.actions.forEach((t,e)=>{i[e]=(...t)=>this.do(e,...t)}),i}trim(e,i){if(!(this.top.id<e)){let t=this.top;for(;t.id>e;){if(!t.prev)return t.cutMe(i),t;if(t.prev.id<e)return t.cutMe(i),t;t=this.top}}}}exports.Tree=Tree;