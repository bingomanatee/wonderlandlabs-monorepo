"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const Branch_1=__importDefault(require("./Branch")),Trans_1=require("./Trans"),helpers_1=require("./helpers");class Forest{constructor(){this.items=new Map,this.pending=[]}register(e){this.items.set(e.forestId,e)}createBranch(e,t){if(t)return this.createBranch(Object.assign(Object.assign({},e),{name:t}));if((0,helpers_1.isBranchConfig)(e))return t=new Branch_1.default(e,this),this.register(t),t;throw console.warn("bad configuration",e),new Error("bad configuration")}trans(t,e){var s=new Trans_1.Trans({name:t,forest:this});this.pending.push(s),console.log("--- starting trans:",t);try{e(s),this.removeTrans(s),this.pending.length<=0?(console.log("committing trans:",t),this.commit()):console.log("not committing ",t,this.pending.length,"trans still in play")}catch(e){throw console.log("redacting trans:",t,e.message),s.fail(e),this.removeTrans(s),console.log("---- after redacting",t," state is",Array.from(this.items.values()).map(e=>JSON.stringify(e.report()))),console.log("surviving pending trans:",this.pending.length),this.pending.forEach(e=>{console.log("surviving transaction:",e.name,e.status)}),e}}removeTrans(t){var e,s=this.pending.findIndex(e=>e.id===t.id);0<=s&&(e=this.pending.slice(s),this.pending=this.pending.slice(0,s),e.forEach(t=>{this.items.forEach(e=>{(0,helpers_1.isTransactionalIF)(e)&&e.removeTempValues(t.id)})}))}commit(){this.items.forEach(e=>{e.commit()}),this.items.forEach(e=>e.flushTemp())}}exports.default=Forest;