import { z } from 'zod';

// Schema handles structure and basic constraints
const ProductSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1).max(100),
  price: z.number().positive(),
  category: z.enum(['electronics', 'clothing', 'books']),
  inStock: z.number().int().min(0),
  isActive: z.boolean()
});

type ProductState = z.infer<typeof ProductSchema>;

const productForestFactory = () => new Forest<ProductState>({
  name: 'product-store',
  schema: ProductSchema, // Validates structure automatically
  value: {
    id: crypto.randomUUID(),
    name: '',
    price: 0,
    category: 'electronics',
    inStock: 0,
    isActive: true
  },
  
  // Prep handles business logic and user input validation
  prep: function(input: Partial<ProductState>, current: ProductState): ProductState {
    const result = { ...current, ...input };
    let qualityMessage = '';
    
    // Business rule validations (not structural)
    if (result.price > 0 && result.price < 0.01) {
      qualityMessage = 'Price seems unusually low';
    }
    
    if (result.name && result.name.toLowerCase().includes('test')) {
      qualityMessage = 'Product name contains "test" - is this intentional?';
    }
    
    if (result.inStock === 0 && result.isActive) {
      qualityMessage = 'Active product with zero stock - consider deactivating';
    }
    
    return { ...result, qualityMessage };
  },
  
  actions: {
    updatePrice: function(value, newPrice: number) {
      // Schema will validate that newPrice is positive
      this.set('price', newPrice);
    }
  }
});
