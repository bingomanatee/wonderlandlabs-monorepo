const userForest = new Forest<UserState>({
  name: 'user-store',
  value: {
    name: 'John Doe',
    age: 30,
    email: 'john@example.com',
    preferences: {
      theme: 'light',
      notifications: true
    },
    tags: ['developer', 'typescript']
  },
  actions: {
    // Single field updates
    setName: function(value, name: string) {
      this.set('name', name);
    },
    setAge: function(value, age: number) {
      this.set('age', age);
    },
    
    // Multiple field updates
    updateProfile: function(value, updates: Partial<UserState>) {
      this.next({ ...value, ...updates });
    },
    
    // Complex updates with mutate
    addTag: function(value, tag: string) {
      this.mutate(draft => {
        if (!draft.tags.includes(tag)) {
          draft.tags.push(tag);
        }
      });
    },
    
    // Form handler
    onChange: function(value, event: React.ChangeEvent<HTMLInputElement>) {
      const { name, value: fieldValue, type } = event.target;
      const processedValue = type === 'number' ? parseInt(fieldValue) || 0 : fieldValue;
      this.set(name, processedValue);
    }
  },
  tests: [
    (value) => value.age < 0 ? 'Age cannot be negative' : null,
    (value) => value.age > 150 ? 'Age seems unrealistic' : null,
    (value) => !value.email.includes('@') ? 'Invalid email format' : null,
    (value) => value.name.length === 0 ? 'Name cannot be empty' : null
  ]
})
