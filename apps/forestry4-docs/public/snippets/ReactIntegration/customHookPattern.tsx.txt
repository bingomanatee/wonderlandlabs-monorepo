// Reusable hook for any Forestry 4 forest
function useForest<T>(forest: Forest<T>) {
  const [value, setValue] = useState<T>(forest.value);

  useEffect(() => {
    const subscription = forest.subscribe((newValue) => {
      setValue(newValue);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [forest]);

  return [value, forest.$] as const;
}

// Usage in component
function MyComponent() {
  const forest = useMemo(() => todoForestFactory(), []);
  const [value, actions] = useForest(forest);

  return (
    <div>
      <h2>Todos: {value.todos.length}</h2>
      <button onClick={() => actions.addTodo('New task')}>
        Add Todo
      </button>
    </div>
  );
}
