{"version":3,"file":"combinePaths.js","sources":["../../src/lib/combinePaths.ts"],"sourcesContent":["import { Path } from '../types';\n\nfunction toPathArray(p) {\n  if (Array.isArray(p)) {\n    return p;\n  }\n  if (typeof p === 'string') {\n    return p.split('.');\n  }\n  if (p instanceof RegExp) {\n    return [p];\n  }\n  console.log('unparsable path: ', p);\n  throw new Error('cannot parse path');\n}\n\nexport function pathString(path: Path): string {\n  return Array.isArray(path) ? path.join('.') : `${path}`;\n}\n\nexport default function combinePaths(p: Path, p2: Path) {\n  if (!Array.isArray(p)) {\n    return combinePaths(toPathArray(p), p2);\n  }\n\n  if (!Array.isArray(p2)) {\n    return combinePaths(p, toPathArray(p2));\n  }\n\n  if (!p.length) {\n    return p2;\n  }\n  if (!p2.length) {\n    return p;\n  }\n  return [...p, ...p2];\n}\n"],"names":[],"mappings":"AAEA,SAAS,YAAY,GAAG;AACtB,MAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,WAAO;AAAA,EACT;AACA,MAAI,OAAO,MAAM,UAAU;AACzB,WAAO,EAAE,MAAM,GAAG;AAAA,EACpB;AACA,MAAI,aAAa,QAAQ;AACvB,WAAO,CAAC,CAAC;AAAA,EACX;AACA,UAAQ,IAAI,qBAAqB,CAAC;AAClC,QAAM,IAAI,MAAM,mBAAmB;AACrC;AAEO,SAAS,WAAW,MAAoB;AAC7C,SAAO,MAAM,QAAQ,IAAI,IAAI,KAAK,KAAK,GAAG,IAAI,GAAG,IAAI;AACvD;AAEA,SAAwB,aAAa,GAAS,IAAU;AACtD,MAAI,CAAC,MAAM,QAAQ,CAAC,GAAG;AACrB,WAAO,aAAa,YAAY,CAAC,GAAG,EAAE;AAAA,EACxC;AAEA,MAAI,CAAC,MAAM,QAAQ,EAAE,GAAG;AACtB,WAAO,aAAa,GAAG,YAAY,EAAE,CAAC;AAAA,EACxC;AAEA,MAAI,CAAC,EAAE,QAAQ;AACb,WAAO;AAAA,EACT;AACA,MAAI,CAAC,GAAG,QAAQ;AACd,WAAO;AAAA,EACT;AACA,SAAO,CAAC,GAAG,GAAG,GAAG,EAAE;AACrB;"}