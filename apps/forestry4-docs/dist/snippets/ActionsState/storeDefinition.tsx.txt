const forest = new Forest<CounterState>({
  name: 'actions-demo',
  value: { count: 0, history: [], multiplier: 1 },
  actions: {
    // Basic state updates
    increment: function() {
      this.mutate((draft) => {
        draft.count += draft.multiplier;
        draft.history.push(`Incremented to ${draft.count}`);
      });
    },
    decrement: function() {
      this.mutate((draft) => {
        draft.count -= draft.multiplier;
        draft.history.push(`Decremented to ${draft.count}`);
      });
    },
    // Single field updates
    setMultiplier: function(value: CounterState, multiplier: number) {
      this.set('multiplier', multiplier);
    },
    // Complex transformations
    doubleAndLog: function() {
      this.mutate((draft) => {
        const originalCount = draft.count;
        draft.count = originalCount * 2;
        draft.history.push(`Doubled from ${originalCount} to ${draft.count}`);
      });
    },
    // Nested actions
    incrementTwice: function(value: CounterState) {
      this.$.increment();
      this.$.increment();
    },
    reset: function() {
      this.next({ count: 0, history: ['Reset to 0'], multiplier: 1 });
    },
    clearHistory: function(value: CounterState) {
      this.set('history', []);
    },
  },
  tests: [
    (value: CounterState) => value.count < -100 ? 'Count too low' : null,
    (value: CounterState) => value.count > 100 ? 'Count too high' : null,
    (value: CounterState) => value.multiplier < 1 ? 'Multiplier must be at least 1' : null,
  ]
});
