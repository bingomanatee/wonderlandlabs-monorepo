Object.defineProperty(exports,"__esModule",{value:!0}),exports.Tree=void 0;let enums_1=require("./enums"),Branch_1=require("./Branch"),Leaf_1=require("./Leaf"),helpers_1=require("./helpers"),isTreeSet_1=require("./helpers/isTreeSet"),isTreeDel_1=require("./helpers/isTreeDel"),constants_1=require("./constants");class Tree{constructor(e){this.async=!1;var{forest:e,treeName:t,data:r}=e;this.forest=e,this.treeName=t,r&&(this.root=new Branch_1.Branch(this,{data:r,cause:enums_1.BranchActionEnum.init}))}get top(){if(this.root){let e=this.root;for(;e;){if(!e.next)return e;e=e.next}return e}}get(e){return this.root?this.root.get(e):new Leaf_1.Leaf({treeName:this.treeName,key:e,val:constants_1.NOT_FOUND})}has(e){return!!this.root&&!!this.top?.has(e)}push(e,t,r){if(this.root)return this.root.set(e,t);this.root=new Branch_1.Branch(this,{data:(0,helpers_1.mp)(e,t),cause:enums_1.BranchActionEnum.set})}set(e,t){return this.push(e,t,enums_1.BranchActionEnum.set),this.top.get(e)}del(e){return this.push(e,constants_1.DELETED,enums_1.BranchActionEnum.del),this.top.get(e)}get status(){return enums_1.StatusEnum.good}change(e){if((0,isTreeSet_1.isTreeSet)(e))return this.set(e.key,e.val),{treeName:this.treeName,change:e,status:this.status};if((0,isTreeDel_1.isTreeDel)(e))return this.del(e.key),{treeName:this.treeName,change:e,status:this.status};throw new Error("not implemented")}}exports.Tree=Tree;