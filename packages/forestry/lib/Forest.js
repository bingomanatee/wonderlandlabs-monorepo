var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Forest=void 0;let Tree_1=__importDefault(require("./Tree")),rxjs_1=require("rxjs"),utils_1=require("./utils"),lodash_es_1=require("lodash-es");function pad(e){let t=""+e;for(;t.length<3;)t="0"+t;return t}class Forest{constructor(){this.trees=new Map,this._time=0,this.activeTaskSubject=new rxjs_1.BehaviorSubject(new Set)}uniqueTreeName(e="tree"){if(!this.hasTree(e))return e;let t=1;for(;this.hasTree(e+"-"+pad(t));)t+=1;return e+"-"+pad(t)}hasTree(e){return this.trees.has(e)}tree(e){if(this.hasTree(e))return this.trees.get(e)}get treeNames(){return Array.from(this.trees.keys())}addTree(e,t){if(this.hasTree(e))throw new Error("cannot redefine tree "+e);t=new Tree_1.default(this,e,t);return this.trees.set(e,t),t}get time(){return this._time}get nextTime(){return this._time=this._time+1,this.time}get activeTasks(){return this.activeTaskSubject.value.size?Array.from(this.activeTaskSubject.value.values()):[]}do(e){let r=this.nextTime;this.addActiveTask(r);try{var t=e(this);return this.removeActiveTask(r),t}catch(t){throw this.removeActiveTask(r),this.trees.forEach(e=>{e.rollback(r,t instanceof Error?t.message:"unknown error")}),t}}addActiveTask(e){var t=new Set(this.activeTaskSubject.value);t.add(e),this.activeTaskSubject.next(t)}removeActiveTask(e){var t=new Set(this.activeTaskSubject.value);t.delete(e),this.activeTaskSubject.next(t)}observe(e){if(!this.hasTree(e))throw new Error("cannot observe "+e+": no tree by that name");var t=this.tree(e);if(t)return(0,rxjs_1.combineLatest)([this.activeTaskSubject,t.subject]).pipe((0,rxjs_1.filter)(([e])=>0===e.size),(0,rxjs_1.map)(([,e])=>e),(0,rxjs_1.distinctUntilChanged)(lodash_es_1.isEqual));throw new Error("cannot observe "+e+": no tree by that name exists")}addNote(e,t){this._notes||(this._notes=new Map),utils_1.NotableHelper.addNote(this.time,this._notes,e,t)}hasNoteAt(e){return this._notes?.has(e)||!1}notes(e,t=0){return this._notes?utils_1.NotableHelper.notes(this._notes,e,t):[]}}exports.Forest=Forest;