Object.defineProperty(exports,"__esModule",{value:!0}),exports.Branch=void 0;let constants_1=require("./constants"),join_1=require("./join"),CACHE_UNSET=Symbol("CACHE_UNSET");class Branch{constructor(t,e,i){this.tree=t,this.mutator=e,this.input=i,this.isCached=!1,this._cache=CACHE_UNSET,this.isAlive=!0,this.id=t.forest.nextID}get value(){if(!this.isAlive)throw new Error("cannot get value from dead branch");if(this.mutator.cacheable){if(this.isCached)return this._cache;if(this.mutator.cacheable!==constants_1.CACHE_TOP_ONLY)return this.setCache(),this._cache;if(this===this.tree.top)return this.setCache(),this._cache}return this.mutator.mutator(this,this.input)}setCache(){this._cache=this.mutator.mutator(this,this.input),this.isCached=!0,this.mutator.cacheable===constants_1.CACHE_TOP_ONLY&&this.clearPrevCache()}clearCache(){this._cache=void 0,this.isCached=!1}clearPrevCache(t=!1){t&&this.clearCache(),this.prev?.clearPrevCache(!0)}push(t){this.next?this.next.push(t):(0,join_1.join)(this,t)}popMe(){if(this.isAlive)return(0,join_1.join)(this.prev,this.next),this.prev=void 0,this.next=void 0,this.isAlive=!1,this;throw new Error("cannot pop a dead branch")}cutMe(t){if(this.isAlive)return this.prev&&(this.prev.next=this.next,this.prev=void 0),this.tree.trimmed.push({id:this.id,mutator:this.mutator.name,data:this.input,errorId:t}),this;throw new Error("cannot cut a dead branch")}destroy(){if(!this.isAlive)throw new Error("cannot destory a dead branch");this.popMe(),this._cache=CACHE_UNSET,this.tree=void 0}get isTop(){return!!this.isAlive&&!this.next}get isRoot(){return!!this.isAlive&&this===this.tree.root}}exports.Branch=Branch;