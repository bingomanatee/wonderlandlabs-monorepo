"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const ErrorPlus_1=require("./ErrorPlus"),collect_1=require("@wonderlandlabs/collect");function upsertIntoMap(e,t,o){e.has(t)?e.get(t).push(o):e.set(t,[o])}class JoinIndex{constructor(e,t){this.tree=e,this.joinName=t,this.fromIndex=new Map,this.toIndex=new Map,this.isGenerated=!1;const o=this;this.tree.updates.subscribe({next(e){o.join.to!==e.collection&&o.join.from!==e.collection||o.clearCache()}})}clearCache(){this.isGenerated=!1,this.fromIndex=new Map,this.toIndex=new Map}get join(){var e=this.tree.joins.get(this.joinName);if(e)return e;throw new ErrorPlus_1.ErrorPlus("missing join schema",this)}_index(e,t){upsertIntoMap(this.fromIndex,e,t),upsertIntoMap(this.toIndex,t,e)}get fromColl(){var e=this.tree.collection(this.join.from);if(e)return e;throw new ErrorPlus_1.ErrorPlus("cannot find from collection",this)}get toColl(){var e=this.tree.collection(this.join.to);if(e)return e;throw new ErrorPlus_1.ErrorPlus("cannot find from collection",this)}generateFromFieldToToField(){var{join:e,fromColl:t,toColl:o}=this;const{fromField:i,toField:r}=e;let s=(0,collect_1.c)(o.values).getReduce((e,t,o,i)=>{return r in t&&(t=t[r],upsertIntoMap(s,t,o)),e});t.values.forEach((e,t)=>{if(i in e){e=e[i],e=s.get(e);if(e)for(const o of e)this._index(t,o)}})}generate(){this.fromIndex=new Map,this.toIndex=new Map,this.join.fromField?(this.generateFromFieldToToId(),this.join.toField&&this.generateFromFieldToToField()):this.join.toField?this.generateFromIdToToField():this.generateFromIdToToId(),this.isGenerated=!0}generateFromFieldToToId(){const{join:e,fromColl:t,toColl:o}=this,i=e["fromField"];t.values.forEach((e,t)=>{i in e&&(e=e[i],o.has(e))&&this._index(t,e)})}generateFromIdToToField(){const{join:e,fromColl:o,toColl:t}=this,i=e["toField"];t.values.forEach((e,t)=>{i in e&&(e=e[i],o.has(e))&&this._index(e,t)})}generateFromIdToToId(){var{fromColl:e,toColl:t}=this;for(const o in e.values.keys())t.has(o)&&this._index(o,o)}toLeafsFor(e,t){return this.isGenerated||this.generate(),this.toIndex.has(e)?(e=this.toIndex.get(e),console.log("indexes = ",e),e.map(e=>this.tree.leaf(this.join.from,e,t))):[]}fromLeafsFor(e,t){return this.isGenerated||this.generate(),this.fromIndex.has(e)?this.fromIndex.get(e).map(e=>this.tree.leaf(this.join.to,e,t)):[]}}exports.default=JoinIndex;