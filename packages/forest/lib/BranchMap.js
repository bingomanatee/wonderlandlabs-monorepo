Object.defineProperty(exports,"__esModule",{value:!0}),exports.BranchMap=void 0,exports.linkBranches=linkBranches;let enums_1=require("./helpers/enums"),Leaf_1=require("./Leaf"),helpers_1=require("./helpers"),constants_1=require("./constants"),isChangeSet_1=require("./helpers/isChangeSet"),isTreeDel_1=require("./helpers/isTreeDel"),BranchBase_1=require("./BranchBase");function linkBranches(e,t){e&&(e.next=t),t&&(t.prev=e)}class BranchMap extends BranchBase_1.BranchBase{constructor(e,t){super(e,t),this.data=this._initData(t),t.prev&&(this.prev=t.prev)}get next$(){if(this.next)return this.next}get prev$(){if(this.prev)return this.prev}forEach(e){let t=!1;var r,s,a=()=>t=!0;if(this.tree.dataType!==enums_1.DataType_s.map)throw new Error("bad data for BranchMap");for([r,s]of this.data)if(e(s,r,a),t)break}get root(){if(this.tree?.root)return this.tree.root;console.warn("branch has a tree without a root, or no tree")}get top(){if(this.tree?.top)return this.tree.top;console.warn("branch has a tree without a root, or no tree")}destroy(){this.next=void 0,this.prev=void 0,this.data.clear(),this.cache?.clear(),this.causeID&&this.tree.activeScopeCauseIDs.has(this.causeID)&&this.tree.activeScopeCauseIDs.delete(this.causeID)}mergedData(){var e;return this!==this.top?this.top.mergedData():(e=(0,helpers_1.findPrevBranch)(this,e=>e.cache))?e.next$?e.next$.values(e.cache):new Map(e.cache):this.root.values(new Map)}values(e){let t=this,r=e||new Map;for(;t;)t.cache?r=t.cache:(r=new Map(r),t.data.forEach((e,t)=>r?.set(t,e))),t=t.next$;return r}_initData(e){if(e.data){if(e.data instanceof Map)return e.data;throw new Error("BranchMap: data must be a Map")}return new Map}leaf(e){return new Leaf_1.Leaf({key:e,val:this.get(e),treeName:this.tree.name})}get(e){if(this.data.has(e))return(0,helpers_1.delToUndef)(this.data.get(e));if(this.cache)return this.cache.has(e)?(0,helpers_1.delToUndef)(this.cache.get(e)):void 0;let t=this.prev;for(;t;){if(t.has(e,!0))return t.get(e);if(t.cache)return;t=t.prev$}}has(e,t){return!!this.cache?.has(e)||!!this.data.has(e)||!t&&!!this.prev&&this.prev.has(e)}get forest(){return this.tree.forest}make$(e){return new BranchMap(this.tree,e)}ensureCurrentScope(){if(this.forest.currentScope&&this.forest.currentScope.status===enums_1.Status_s.pending&&!this.tree.activeScopeCauseIDs.has(this.forest.currentScope.scopeID)){if(this.tree.top!=this.tree.top)return this.tree.top?.ensureCurrentScope();var e=this.forest["currentScope"];this.next=new BranchMap(this.tree,{cause:e.cause,status:e.status,causeID:e.scopeID,prev:this}),this.tree.activeScopeCauseIDs.add(e.scopeID),e.inTrees.add(this.tree.name)}}set(e,t){var r=this.tree.top;if(this!==r)return r?.set(e,t);this.ensureCurrentScope();r=this.make$({data:new Map([[e,t]]),cause:enums_1.Action_s.set});this.push(r)}del(e){if(this.next)return this.next.del(e);e=this.make$({data:new Map([[e,constants_1.DELETED]]),cause:enums_1.Action_s.del});this.push(e)}change(e){if((0,isChangeSet_1.isTreeSet)(e))this.set(e.key,e.val);else{if(!(0,isTreeDel_1.isTreeDel)(e))throw new Error("cannot implement change "+e.type.toString());this.del(e.key)}return{treeName:e.treeName,change:e,status:enums_1.Status_s.good}}}exports.BranchMap=BranchMap;