Object.defineProperty(exports,"__esModule",{value:!0}),exports.BranchBase=void 0;let enums_1=require("./helpers/enums"),helpers_1=require("./helpers"),isTreeSet_1=require("./helpers/isTreeSet"),isTreeDel_1=require("./helpers/isTreeDel");function destroyChain(e){e&&(destroyChain(e.next),e.destroy())}class BranchBase{constructor(e,t){this.tree=e,this.data={},this.async=!1;var{cause:s,causeID:r}=t;this.id=e.forest.nextBranchId(),this.cause=s,this.causeID=r,this.status="status"in t?t.status:enums_1.Status_s.good,this._initData(t)}values(e){throw new Error("Method not implemented.")}mergedData(){throw new Error("Method not implemented.")}has(e,t){throw new Error("Method not implemented.")}leaf(e){throw new Error("Not Implemented")}get(e){throw new Error("Not Implemented")}make(e){throw new Error("not implemented")}set(e,t){throw new Error("not implemented")}_initData(e){this.dataType===enums_1.DataType_s.map?this.data=e.data||new Map:this.dataType===enums_1.DataType_s.object&&(this.data=e.data||{})}del(e){throw new Error("not implemented")}get dataType(){return this.tree.dataType}forEach(e){let t=!1;var s=()=>t=!0;if(this.dataType===enums_1.DataType_s.map){for(var[r,a]of this.data)if(e(a,r,s),t)break}else{if(this.dataType!==enums_1.DataType_s.object)throw new Error("bad data for BranchMap");if(this.data instanceof Map)throw new Error("bad data");for(var i of Object.keys(this.data))if(e(this.data[i],i,s),t)break}}clearCache(e){this.cause===enums_1.Action_s.trans&&!e||(this.cache instanceof Map&&this.cache?.clear(),this.cache=void 0,this.prev?.clearCache(!!e))}destroy(){this.next=void 0,this.prev=void 0,this.data instanceof Map&&this.data.clear(),this.cache instanceof Map&&this.cache.clear(),this.causeID&&this.tree.activeScopeCauseIDs.has(this.causeID)&&this.tree.activeScopeCauseIDs.delete(this.causeID)}pop(){this===this.tree.root?this.tree.root=this.next:(0,helpers_1.linkBranches)(this.prev,this.next),this.destroy()}push(e){e&&((0,helpers_1.linkBranches)(e,this.next),(0,helpers_1.linkBranches)(this,e))}prune(){var{tree:e,prev:t}=this;this.next;this===e.root&&(e.root=void 0),t&&(t.next=void 0),destroyChain(this)}get forest(){return this.tree.forest}ensureCurrentScope(){if(this.forest.currentScope&&this.forest.currentScope.status===enums_1.Status_s.pending&&!this.tree.activeScopeCauseIDs.has(this.forest.currentScope.scopeID)){if(this.tree.top!=this.tree.top)return this.tree.top?.ensureCurrentScope();var e=this.forest["currentScope"];this.next=this.make({cause:e.cause,status:e.status,causeID:e.scopeID,prev:this}),this.tree.activeScopeCauseIDs.add(e.scopeID),e.inTrees.add(this.tree.name)}}change(e){if((0,isTreeSet_1.isTreeSet)(e))this.set(e.key,e.val);else{if(!(0,isTreeDel_1.isTreeDel)(e))throw new Error("cannot implement change "+e.type.toString());this.del(e.key)}return{treeName:e.treeName,change:e,status:enums_1.Status_s.good}}}exports.BranchBase=BranchBase;