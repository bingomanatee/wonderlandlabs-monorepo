import { z } from 'zod';

// Conditional validation based on other fields
const PaymentSchema = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('credit_card'),
    cardNumber: z.string().regex(/^\d{16}$/),
    expiryMonth: z.number().int().min(1).max(12),
    expiryYear: z.number().int().min(new Date().getFullYear()),
    cvv: z.string().regex(/^\d{3,4}$/)
  }),
  z.object({
    type: z.literal('paypal'),
    email: z.string().email()
  }),
  z.object({
    type: z.literal('bank_transfer'),
    accountNumber: z.string().min(8),
    routingNumber: z.string().regex(/^\d{9}$/)
  })
]);

// Schema with conditional requirements
const UserProfileSchema = z.object({
  name: z.string().min(1),
  age: z.number().int().min(0),
  isMinor: z.boolean(),
  parentEmail: z.string().email().optional(),
  canDrive: z.boolean().optional()
}).refine(
  (data) => !data.isMinor || data.parentEmail,
  { message: "Parent email required for minors", path: ["parentEmail"] }
).refine(
  (data) => data.age < 16 || data.canDrive !== undefined,
  { message: "Must specify driving status for users 16+", path: ["canDrive"] }
);
