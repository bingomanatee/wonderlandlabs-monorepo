var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Forest=void 0;let Tree_1=__importDefault(require("./Tree")),rxjs_1=require("rxjs"),lodash_isequal_1=__importDefault(require("lodash.isequal"));function pad(e){let t=""+e;for(;t.length<3;)t="0"+t;return t}class Forest{constructor(){this.trees=new Map,this._time=0,this.depth=new rxjs_1.BehaviorSubject(new Set)}uniqueTreeName(e="tree"){if(!this.hasTree(e))return e;let t=1;for(;this.hasTree(e+"-"+pad(t));)t+=1;return e+"-"+pad(t)}hasTree(e){return this.trees.has(e)}tree(e){if(this.hasTree(e))return this.trees.get(e)}addTree(e,t){if(this.hasTree(e))throw new Error("cannot redefine tree "+e);t=new Tree_1.default(this,e,t);return this.trees.set(e,t),t}get nextTime(){var e=this._time+1;return this._time=e}do(e){let r=this.nextTime;this.addDepth(r);try{var t=e(this);return this.unDepth(r),t}catch(t){throw this.trees.forEach(e=>{e.rollback(r,t instanceof Error?t.message:"unknown error")}),t}}addDepth(e){var t=new Set(this.depth.value);t.add(e),this.depth.next(t)}unDepth(e){var t=new Set(this.depth.value);t.delete(e),this.depth.next(t)}observe(e){if(!this.hasTree(e))throw new Error("cannot observe "+e+": no tree by that name");var t=this.tree(e);if(t)return(0,rxjs_1.combineLatest)(this.depth,t.subject).pipe((0,rxjs_1.filter)(([e])=>0===e.size),(0,rxjs_1.map)(([,e])=>e),(0,rxjs_1.distinctUntilChanged)(lodash_isequal_1.default));throw new Error("cannot observe "+e+": no tree by that name exists")}}exports.Forest=Forest;