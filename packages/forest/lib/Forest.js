Object.defineProperty(exports,"__esModule",{value:!0}),exports.Forest=void 0;let isString_1=require("./helpers/isString"),isLeafIdentityIF_1=require("./helpers/isLeafIdentityIF"),Tree_1=require("./Tree"),isLeafIF_1=require("./helpers/isLeafIF"),constants_1=require("./constants"),enums_1=require("./enums"),DEFAULT_CACHE_INTERVAL=8;class Forest{constructor(e){this.trees=new Map,this._nextBranchId=1,this.cacheInterval=e?.cacheInterval||DEFAULT_CACHE_INTERVAL}delete(e,t){if((0,isLeafIF_1.isLeafIF)(e))return this.delete(e.treeName,e.key);if(this.hasTree(e))return this.tree(e).del(t),{treeName:e,status:this.tree(e).status,change:{key:t,val:constants_1.DELETED,treeName:e,type:enums_1.ChangeTypeEnum.del}};throw new Error("cannot delete from "+e+": no tree found")}nextBranchId(){var e=this._nextBranchId;return this._nextBranchId+=1,e}addTree(e){var{name:e,data:t,upsert:r}=e;if(this.hasTree(e)){if(!r)throw new Error("cannot redefine existing treer "+e)}else this.trees.set(e,new Tree_1.Tree({forest:this,treeName:e,data:t}));return this.tree(e)}get(e,t){if(!(0,isLeafIdentityIF_1.isLeafIdentityIF)(e))return this.get({treeName:e,key:t});if(this.hasTree(e.treeName))return this.tree(e.treeName).leaf(e.key);throw new Error("forest:get -- cannot find tree "+e.treeName)}set(e,t,r){if((0,isLeafIF_1.isLeafIF)(e))return this.set(e.treeName,e.key,e.val);var s;if(this.hasTree(e))return(s=this.tree(e))?.set(t,r),{treeName:e,change:{treeName:e,key:t,val:r,type:enums_1.ChangeTypeEnum.set},status:s.status};throw new Error("cannot set - no tree "+e)}change(e,t){var r,s=[];for(r of e){if(!r.treeName||t)throw new Error("change: requires treeName");var a=r.treeName||t;if(!(0,isString_1.isString)(a)||!this.hasTree(a))throw new Error("change missing tree name");a=this.tree(a);s.push(a.change(r))}return s.flat()}hasKey(e,t){return this.has({treeName:e,key:t})}has(e){return!!this.hasTree(e.treeName)&&this.tree(e.treeName).has(e.key)}hasAll(e){return e.every(e=>{this.has(e)})}hasTree(e){return this.trees.has(e)}tree(e){return this.trees.get(e)}}exports.Forest=Forest;