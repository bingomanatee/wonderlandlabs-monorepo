Object.defineProperty(exports,"__esModule",{value:!0}),exports.Tree=void 0;let Branch_1=require("./Branch"),rxjs_1=require("rxjs"),utils_1=require("./utils"),Beaver_1=require("./treeHelpers/Beaver"),PreValidator_1=require("./treeHelpers/PreValidator"),BenchMarker_1=require("./treeHelpers/BenchMarker");class Tree{forest;name;params;constructor(e,t,r){this.forest=e,this.name=t,(this.params=r)&&"initial"in r&&(e=r["initial"],void 0!==e)&&(this.root=new Branch_1.Branch(this,{assert:e,name:"initial"}),this.top=this.root),this.stream=new rxjs_1.BehaviorSubject(this.top)}get isUncacheable(){return!!this.params&&Boolean(this.params.uncacheable)}stream;next(e,t="(next)"){this.grow({assert:e,name:t})}rollback(t,r){if(this.top&&!(this.top.time<t)){let e=this.top;for(;e.prev&&e.prev.time>=t;)e=e.prev;r={time:t,error:r,branch:e},r=(this.offshoots||(this.offshoots=[]),this.offshoots.push(r),e.prev);(this.top=r)?r.next=void 0:(this.root=void 0,this.top=void 0)}}mutate(e,t,r){r?this.grow({mutator:e,seed:t,name:r}):e.name?this.grow({mutator:e,seed:t,name:e.name}):this.grow({mutator:e,seed:t,name:"(mutation)"})}offshoots;root;top;grow(t){return this.forest.do(()=>{var e;if(this.params?.validator&&PreValidator_1.PreValidator.validate(t,this),!this.params?.benchmarkInterval||!BenchMarker_1.BenchMarker.shouldBenchmark(this,t))return e=new Branch_1.Branch(this,t),this.top?this.top.linkTo(e):this.root=e,this.top=e,new Beaver_1.Beaver(this).limitBranchLength(),this.stream.next(this.top),this.top;new BenchMarker_1.BenchMarker(this).benchmark(t)})}validate(r){if(!this.params?.validator)return{isValid:!0,value:r,tree:this.name};try{var e=this.params.validator(r,this);return e?{isValid:!1,value:r,tree:this.name,error:e.message}:{isValid:!0,value:r,tree:this.name}}catch(e){let t="";return t=e instanceof Error?e.message:"string"==typeof e?e:""+e,{value:r,tree:this.name,isValid:!1,error:t}}}get subject(){return this.stream.pipe((0,rxjs_1.filter)(e=>!!e),(0,rxjs_1.map)(e=>e.value))}subscribe(e){return this.subject.subscribe(e)}valueAt(t){if(this.top){let e=this.top;for(;e&&e.time>t;)e=e.prev;return e?e.value:void 0}}get value(){if(this.top)return this.top.value;throw new Error("cannot get the value from an empty tree")}_notes;addNote(e,t){this._notes||(this._notes=new Map),utils_1.NotableHelper.addNote(this.forest.time,this._notes,e,t,this.name)}hasNoteAt(e){return this._notes?.has(e)||!1}notes(e,t=0){return this._notes?utils_1.NotableHelper.notes(this._notes,e,t):[]}branchCount(e){if(!this.top)return 0;let t=0,r=this.top;for(;(!e||t<e)&&r;)t+=1,r=r.prev;return t}forEachDown(e,t=null){let r=this.top,s=0;for(;r;){if(!0===e(r,s))break;if(s+=1,r=r.prev,null!==t&&s>=t)break}}forEachUp(e,t=null){let r=this.root,s=0;for(;r;){if(!0===e(r,s))break;if(s+=1,r=r.next,null!==t&&s>=t)break}}}exports.Tree=Tree;