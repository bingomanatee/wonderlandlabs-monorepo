Object.defineProperty(exports,"__esModule",{value:!0});let rxjs_1=require("rxjs"),Tree_1=require("./Tree"),types_1=require("./types");function isDataEngineFn(e){return"function"==typeof e}class Forest{constructor(e){this.trees=new Map,this.engines=new Map,this._nextID=0,this.activeTransactionIds=new rxjs_1.BehaviorSubject(new Set),e.forEach(e=>{if((0,types_1.isDataEngineFactory)(e))this.engines.set(e.name,e.factory);else{if(!(0,types_1.isDataEngineIF)(e))throw new Error("strange engine");this.engines.set(e.name,e)}})}tree(e,t){if(!t){if(this.trees.has(e))return this.trees.get(e);throw new Error("cannot find tree "+e)}if(this.trees.has(e))throw new Error("cannot redefine tree "+e);t=new Tree_1.Tree(this,e,t);return this.trees.set(e,t),t}dataEngine(e,t){if("string"==typeof e){if(!this.engines.has(e))throw new Error("cannot find engine "+e);var r=this.engines.get(e);if(isDataEngineFn(r)){if(t)return r(t);throw new Error("dataEngine(<string>, <tree>) requires a tree arg")}if((0,types_1.isDataEngineIF)(r))return r;throw new Error("strange engine for "+e)}if((0,types_1.isDataEngineFactory)(e)){if(t)return e.factory(t);throw new Error("dataEngine(<string>, <tree>) requires a tree arg")}if((0,types_1.isDataEngineIF)(e))return this.engines.set(e.name,e),e;throw new Error("strange arg to dataEngine")}get nextID(){return this._nextID+=1,this._nextID}changeActiveTransactionIDs(e){var t=new Set(this.activeTransactionIds.value),e=e(t);this.activeTransactionIds.next(e||t)}transact(e){let t=this.nextID;this.changeActiveTransactionIDs(e=>{e.add(t)});try{var r=e(t);return this.changeActiveTransactionIDs(e=>{e.delete(t)}),r}catch(e){throw this.changeActiveTransactionIDs(e=>{e.delete(t)}),this.trees.forEach(e=>e.trim(t)),e}}}exports.default=Forest;