"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const uuid_1=require("uuid"),rxjs_1=require("rxjs");class ForestItem{constructor(e,t,s){this.name=e,this.forest=s,this.observable=new rxjs_1.BehaviorSubject(null),this.tempValues=[],this.do={},this.forestId=(0,uuid_1.v4)(),this.observable.next(t)}registerInForest(){this.forest.register(this)}get committedValue(){return this.observable.value}subscribe(e){return this.observable.subscribe(e)}set value(t){this.forest.trans("change",e=>this.change(e,t))}get value(){return(this.tempValues.length?this.tempValues[this.tempValues.length-1]:this.observable).value}commit(){this.hasTempValues&&this.observable.next(this.value)}flushTemp(){this.tempValues=[]}get hasTempValues(){return 0<=this.tempValues.length}report(){return{id:this.forestId,name:this.name,obsValue:this.observable.value,tempValues:this.tempValues}}change(t,e){try{this.pushTempValue(e,t.id),this.validate()}catch(e){throw this.removeTempValues(t.id),e}}reflectPendingValue(e,t){}pushTempValue(e,t){this.tempValues.push({value:e,id:t})}validate(){this.test&&this.test(this.value,this)}removeTempValues(t){var e=this.tempValues.findIndex(e=>e.id===t);0<=e&&(this.tempValues=this.tempValues.slice(0,e))}}exports.default=ForestItem;