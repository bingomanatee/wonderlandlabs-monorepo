
# "High Speed" outline of primary utilites on Collections and Trees

There is a basic hierarchy of `Forest` ... `Tree` ... `Collection`.

* `Forests` coordinate updates between multiple `Tree` instances. They maintain a single map of
  trees, indexed by $name.
* A `Tree` is a single atomic value manager.
* `Collections` decorate Trees, adding change actions

A Tree is a "raw" Collection; if all you want is a utility to set and get state from and want to
externalize all your change functions, this will let you have a basic transportable state.

Collections give you the ability to attach change functions to your tree.

## Updating from Collection and Tree instances

`Tree` and `Collection` instances share the same interface for updates:

* `next(nextValue)` simply sets the next value to a concrete replacement.
* `update((value, seed) => nextValue, seed)` updates the state with a function (and optional argument).
* `mutate(({value, $branch, seed}) => nextValue, seed)` is like update but gives you access to the Tree
  (and by extension the forest and other trees in it) if you need more insight into the overall application

## Getting information from `Collection` and `Tree` instances

* `.value` has the current value of a `Tree` or `Collection` instance.
* `.subscribe((value) => {...})` feeds you the most recent value from a Tree or Collection instance.
  This follows [RxJS Observable pattern](https://rxjs.dev/guide/overview)
  and returns a [`Subscription`](https://rxjs.dev/guide/subscription) instance that you can call `.unsubscribe()`
  on to terminate updates.

## Collection Actions

Collection actions are all bound to the collection; all the properties of the collection
including the tree and forest properties can be accessed off `this`.


