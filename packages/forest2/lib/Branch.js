Object.defineProperty(exports,"__esModule",{value:!0}),exports.Branch=void 0;let types_shared_1=require("./types.shared");class Branch{constructor(e,t){this.tree=e,this.change=t,this.time=e.forest.nextTime}get next(){return this._next}set next(e){if(this===e)throw new Error("cannot self recurse");if(e&&this.prev===e)throw new Error("cannot self recurse loop");this._next=e}get prev(){return this._prev}set prev(e){if(this.prev===e)throw new Error("cannot self-recurse");if(e&&this.next===e)throw new Error("cannot self recurse loop");this._prev=e}add(e){e=new Branch(this.tree,e);return this.link(this,e),e}get value(){return(0,types_shared_1.isMutator)(this.change)?this.change.next(this.prev,this.change.seed):this.change.next}linkTo(e){return this.link(this,e)}link(e,t){e&&(e.next=t),t&&(t.prev=e)}toString(){return`branch ${this.time} of tree {${this.tree.name??"(anon)"}} - value = ${this.value} next=${this.next?this.next.time:"<null>"} prev=`+(this.prev?this.prev.time:"<null>")}}exports.Branch=Branch;