Object.defineProperty(exports,"__esModule",{value:!0}),exports.Tree=void 0;let constants_1=require("./constants"),Branch_1=require("./Branch"),join_1=require("./join"),helpers_1=require("./helpers"),ValidatorError_1=require("./ValidatorError"),DEFAULT_INITIALIZER={name:"DEFAULT_INITIALIZER",mutator:function(t,r){return r[0]}};class Tree{constructor(t,r,e){this.forest=t,this.name=r,this.trimmed=[],this.mut={},this.engineName=e.engineName;t=[e.val],e.validators&&(this.validators=e.validators),r=this.engine.actions.has(constants_1.ACTION_NAME_INITIALIZER)?this.engine.actions.get(constants_1.ACTION_NAME_INITIALIZER):DEFAULT_INITIALIZER;this.root=new Branch_1.Branch(this,r,t),this.mut=this.makeMut(),this.mutValidators=e.mutatorValidators||[]}get top(){let t=this.root;for(;t;){if(!t.next)return t;t=t.next}return t}get engine(){return this._engine||(this._engine=this.forest.engine(this.engineName,this)),this._engine}get value(){return this.top.value}validate(){this.engine.validator&&this.engine.validator(this.value,this),this.validators?.forEach(r=>{try{r(this)}catch(t){throw new ValidatorError_1.ValidatorError(t,r)}})}mutate(e,...i){if(this.mutValidators.forEach(r=>{try{if(r.onlyFor){if("string"==typeof r.onlyFor&&e!=e)return;if(Array.isArray(r.onlyFor)&&-1===r.onlyFor.indexOf(e))return}r.validator(i,this,e)}catch(t){throw this.forest.errors.push({message:(0,helpers_1.errorMessage)(t),id:this.forest.nextID,mutation:e,validator:r.name}),new ValidatorError_1.ValidatorError(t,r,e)}}),!this.engine.actions.has(e))throw new Error("engine "+this.engineName+" does not have an action "+e);let r=this.engine.actions.get(e);return this.forest.transact(()=>{var t=new Branch_1.Branch(this,r,i);(0,join_1.join)(this.top,t);try{this.validate()}catch(t){throw t instanceof ValidatorError_1.ValidatorError&&(t.mutation=e),t}return this.value})}makeMut(){let e={};return this.engine.actions.forEach((t,r)=>{e[r]=(...t)=>this.mutate(r,...t)}),e}trim(r,e){if(!(this.top.id<r)){let t=this.top;for(;t.id>r;){if(!t.prev)return t.cutMe(e),t;if(t.prev.id<r)return t.cutMe(e),t;t=this.top}}}}exports.Tree=Tree;