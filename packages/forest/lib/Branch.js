Object.defineProperty(exports,"__esModule",{value:!0}),exports.Branch=void 0;let enums_1=require("./enums"),Leaf_1=require("./Leaf"),helpers_1=require("./helpers"),constants_1=require("./constants");class Branch{constructor(e,t){this.tree=e,this.async=!1,this.cause=t.cause,this.status=enums_1.StatusEnum.good,this.data=this._initData(t),t.prev&&(this.prev=t.prev)}_initData(e){return e.data||new Map}get(e){var t;return this.data.has(e)?this.leafFactory(e,this.data.get(e)):this.prev?((t=this.prev.get(e)).hasValue&&this.data.set(e,t.val),t):this.leafFactory(e,constants_1.NOT_FOUND)}leafFactory(e,t){return new Leaf_1.Leaf({treeName:this.tree.treeName,key:e,val:t,forest:this.tree.forest})}push(e,t,s){if(this.next)throw new Error("cannot push on a non-terminal branch");e=new Branch(this.tree,{prev:this,data:(0,helpers_1.mp)(e,t),cause:s});return this.next=e}has(e){return!!this.data.has(e)||!!this.prev&&this.prev.has(e)}set(e,t){return this.next?this.next.set(e,t):(this.push(e,t,enums_1.BranchActionEnum.set),this.next.get(e))}del(e){return this.next?this.next.del(e):(this.push(e,constants_1.DELETED,enums_1.ChangeTypeEnum.del),this.next.get(e))}change(e){throw new Error("Method not implemented.")}}exports.Branch=Branch;