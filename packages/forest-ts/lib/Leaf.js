"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Leaf=void 0;const rxjs_1=require("rxjs"),collect_1=require("@wonderlandlabs/collect"),types_1=require("./types"),utils_1=require("./utils");class Leaf{constructor(t,e,i){this.$tree=t,this.$collection=e,this.$identity=i,this.$joins={}}$subscribe(t){return this.$query({}).pipe((0,rxjs_1.map)(([t])=>t)).subscribe(t)}$query(t){return this.$getCollection.query(Object.assign(Object.assign({},t),{identity:this.$identity}))}get $getCollection(){return this.$tree.collection(this.$collection)}get $value(){if(this.$exists)return this.$getCollection.get(this.$identity);throw new Error(`the record ${(0,utils_1.idStr)(this.$identity)} has been removed from `+this.$collection)}get $exists(){return this.$getCollection.has(this.$identity)}toJSON(){if(!this.$exists||void 0===this.$value)return{identity:this.$identity,collection:this.$collection,$exists:!1};const i={value:this.$value,identity:this.$identity,collection:this.$collection,joins:{}};return(0,collect_1.c)(this.$joins).forEach((t,e)=>{i.joins[e]=t.map(t=>t.toJSON()).filter(types_1.isLeafJSON)}),i}}exports.Leaf=Leaf;