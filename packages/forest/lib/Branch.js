"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const collect_1=require("@wonderlandlabs/collect"),walrus_1=require("@wonderlandlabs/walrus"),Leaf_1=__importDefault(require("./Leaf")),Forest_1=__importDefault(require("./Forest")),ForestItem_1=__importDefault(require("./ForestItem")),constants_1=require("./constants"),helpers_1=require("./helpers");class Branch extends ForestItem_1.default{config;forest;constructor(e,t){super(e.name,e.$value,t),this.config=e,this.forest=t,e.leaves&&(0,collect_1.c)(e.leaves).forEach((e,t)=>{this.addLeaf(e,t)}),(0,helpers_1.isChildConfigs)(e.children)&&this.addChildren(e.children)}leaves;addLeaf(e,t){this.leaves||(this.leaves=new Map);e=new Leaf_1.default(this,e,t);this.leaves.set(t,e)}get(e){return(0,collect_1.c)(this.value).get(e)}set(e,t){var a,r=(0,collect_1.c)(this.value).clone();if(r.family!==walrus_1.FormEnum.container)throw new Error("cannot set "+e+" to non-container");this.hasChild(e)?(a=this.child(e))&&(a.value=t):(r.set(e,t),this.value=r.value)}static create(e,t){return(new Forest_1.default).createBranch(e,t)}pushTempValue(e,t,a){var r=(0,collect_1.c)(e).clone();if(r.family===walrus_1.FormEnum.container&&this.children.size)for(var[s,n]of this.children)r.hasKey(s)&&a!==constants_1.UpdateDir.down?n.pushTempValue(r.get(s),t,constants_1.UpdateDir.up):r.set(s,n.value);super.pushTempValue(r.value,t),this.parent&&a!==constants_1.UpdateDir.up&&this.parent.pushTempValue(this.parent.value,t,constants_1.UpdateDir.down)}parent;validate(e){var t=this.value;if(walrus_1.type.describe(t,!0)!==walrus_1.type.describe(this.committedValue,!0))throw console.warn("type change error to change branch value from ",t,"to",this.committedValue),new Error("Cannot change type of Branch");e!==constants_1.UpdateDir.down&&(this.children.forEach(e=>{e.validate(constants_1.UpdateDir.up)}),this.leaves?.forEach(e=>e.validate())),super.validate(),this.parent&&e!==constants_1.UpdateDir.up&&this.parent.validate(constants_1.UpdateDir.down)}child(e){return this.children.get(e)}addChild(e,t){var e={...e,name:t,parent:this};if((0,helpers_1.isBranchConfig)(e))return e=new Branch(e,this.forest),this.children.set(t,e),e;throw new Error("cannot create branch "+t)}addChildren(e){(0,collect_1.c)(e).forEach((e,t)=>{this.addChild(e,t)})}hasChild(e){return this.children.has(e)}children=new Map}exports.default=Branch;