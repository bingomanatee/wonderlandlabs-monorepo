"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const walrus_1=require("@wonderlandlabs/walrus"),helpers_1=require("./helpers"),collect_1=require("@wonderlandlabs/collect"),rxjs_1=require("rxjs");class Leaf{branch;constructor(e,t,s){if(this.branch=e,this.name=s,"string"==typeof t&&(t={type:t}),!(0,helpers_1.isLeafConfig)(t))throw console.warn("bad leaf config",s,t),new Error("mis-configured leaf");this.config=t}get forest(){return this.branch.forest}name;config;get value(){return this.branch.get(this.name)}set value(e){this.branch.set(this.name,e)}validate(){var e=this.value;if(!1!==this.config.required||null!=e){if(this.config.type){var t=walrus_1.type.describe(e,!0);if(t!==this.config.type&&!1!==this.config.strict)throw console.warn("with base",this.branch.value,this.name,"--- type issue; ",t,"is not a ",this.config.type),new Error("field"+this.name+" must be of type "+this.config.type)}this.config.validate&&this.config.validate(e,this)}}get observable(){return this.branch.observable.pipe((0,rxjs_1.map)(e=>this.branch.get(this.name)))}subscribe(e){return this.observable.subscribe(e)}report(){return{type:"leaf",value:this.value,name:this.name,parent:this.branch.forestId}}do={};_initDo(){this.do={},this.config.actions&&(0,collect_1.c)(this.config.actions).forEach((t,s)=>{this.do[s]=(...e)=>{this.forest.trans(s,()=>{t(this,...e)})}})}}exports.default=Leaf;