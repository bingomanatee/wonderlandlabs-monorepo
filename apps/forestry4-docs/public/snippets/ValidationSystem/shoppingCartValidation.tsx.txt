const ShoppingCartSchema = z.object({
  items: z.array(CartItemSchema),
  totalCost: z.number().nonnegative('Total cost cannot be negative')
})

const cartForest = new Forest({
  value: initialCart,
  prep: (input) => {    
    // Layer 1: UI state calculation
    const canCheckout = parsed.data.items.length > 0
    const checkoutError = !canCheckout ? 'Cart is empty' : ''
    input.items = mergeDuplicateProducts(inputItems) 
    return { ...parsed.data, canCheckout, checkoutError }
  },
  // Layer 2: Structural validation (Zod)
  schema: ShoppingCartSchema,
  
  // Layer 3: Critical business rules
  tests: [
    (cart) => cart.items.some(item => item.quantity <= 0) 
      ? 'Invalid quantities detected' : null,
    (cart) => cart.items.length > 100 
      ? 'Cart too large' : null
  ]
})
