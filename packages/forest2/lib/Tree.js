Object.defineProperty(exports,"__esModule",{value:!0}),exports.CLONE_NAME=void 0;let Branch_1=require("./Branch"),types_guards_1=require("./types/types.guards"),rxjs_1=require("rxjs"),utils_1=require("./utils");exports.CLONE_NAME="!CLONE!";class Tree{constructor(t,e,s){this.forest=t,this.name=e,(this.params=s)&&"initial"in s&&(t=s["initial"],void 0!==t)&&(this.root=new Branch_1.Branch(this,{assert:t,name:"initial"}),this.top=this.root),this.stream=new rxjs_1.BehaviorSubject(this.top)}get isUncacheable(){return!!this.params&&Boolean(this.params.uncacheable)}next(t,e="(next)"){this.grow({assert:t,name:e})}rollback(e,s){if(this.top&&!(this.top.time<e)){let t=this.top;for(;t.prev&&t.prev.time>=e;)t=t.prev;s={time:e,error:s,branch:t},s=(this.offshoots||(this.offshoots=[]),this.offshoots.push(s),t.prev);(this.top=s)?s.next=void 0:(this.root=void 0,this.top=void 0)}}grow(e){return this.forest.do(()=>{var t=new Branch_1.Branch(this,e);if(this.top?this.top.linkTo(t):this.root=t,this.top=t,this.params?.validator){t=this.params.validator(t.value,this);if(t)throw t}return this._maybeCache(),this.stream.next(this.top),this.top})}validate(s){if(!this.params?.validator)return{isValid:!0,value:s,tree:this};try{var t=this.params.validator(s,this);if(t)return{isValid:!1,value:s,tree:this,error:t.message}}catch(t){let e="";return{value:s,tree:this,isValid:!1,error:e=t instanceof Error?t.message:"string"==typeof t?t:""+t}}}_maybeCache(){if(this.top&&(0,types_guards_1.hasCachingParams)(this.params)){var{cloneInterval:s,cloner:r}=this.params;let t=this.top,e=0;for(;t;){if(e>=s){var i=r(this);try{var a=this.top?.add({assert:i,name:exports.CLONE_NAME});this.top=a,"counter:cached"===this.name&&console.log("added top:",this.top.time,this.top.value,this.top.cause)}catch(t){console.warn("cannot clone! error is ",t)}return}if(t.cause==exports.CLONE_NAME)return;e+=1,t=t.prev}}}get subject(){return this.stream.pipe((0,rxjs_1.filter)(t=>!!t),(0,rxjs_1.map)(t=>t.value))}subscribe(t){return this.subject.subscribe(t)}valueAt(e){if(this.top){let t=this.top;for(;t&&t.time>e;)t=t.prev;return t?t.value:void 0}}get value(){if(this.top)return this.top.value;throw new Error("cannot get the value from an empty tree")}addNote(t,e){this._notes||(this._notes=new Map),utils_1.NotableHelper.addNote(this.forest.time,this._notes,t,e,this.name)}hasNoteAt(t){return this._notes?.has(t)||!1}notes(t,e=0){return this._notes?utils_1.NotableHelper.notes(this._notes,t,e):[]}}exports.default=Tree;