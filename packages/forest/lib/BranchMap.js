Object.defineProperty(exports,"__esModule",{value:!0}),exports.BranchMap=void 0,exports.linkBranches=linkBranches;let enums_1=require("./helpers/enums"),Leaf_1=require("./Leaf"),helpers_1=require("./helpers"),constants_1=require("./constants"),isTreeSet_1=require("./helpers/isTreeSet"),isTreeDel_1=require("./helpers/isTreeDel"),BranchBase_1=require("./BranchBase");function linkBranches(e,t){e&&(e.next=t),t&&(t.prev=e)}class BranchMap extends BranchBase_1.BranchBase{constructor(e,t){super(e,t),this.data=this._initData(t),t.prev&&(this.prev=t.prev)}forEach(e){let t=!1;var s,r,a=()=>t=!0;if(this.tree.dataType!==enums_1.DataType_s.map)throw new Error("bad data for BranchMap");for([s,r]of this.data)if(e(r,s,a),t)break}destroy(){this.next=void 0,this.prev=void 0,this.data.clear(),this.cache?.clear(),this.causeID&&this.tree.activeScopeCauseIDs.has(this.causeID)&&this.tree.activeScopeCauseIDs.delete(this.causeID)}mergedData(){if(this.cache)return this.cache;let e=this;for(;e&&e.prev&&!e.cache;)e=e.prev;if(!e)return new Map;let s=new Map(e.cache||e.data),t=e.next;for(;t&&(t.cache?s=new Map(t.cache):t.forEach((e,t)=>{s.set(t,e)}),t!==this);)t=t.next;return s}values(s){return this.cache?s=new Map(this.cache):s?this.data.forEach((e,t)=>{s.set(t,e)}):s=new Map(this.data),this.next?this.next.values(s):s}_initData(e){return e.data||new Map}leaf(e){return new Leaf_1.Leaf({key:e,val:this.get(e),treeName:this.tree.name})}get(e){if(this.data.has(e))return(0,helpers_1.delToUndef)(this.data.get(e));if(this.cache)return this.cache.has(e)?(0,helpers_1.delToUndef)(this.cache.get(e)):void 0;let t=this.prev;for(;t;){if(t.has(e,!0))return t.get(e);if(t.cache)return;t=t.prev}}has(e,t){return!!this.cache?.has(e)||!!this.data.has(e)||!t&&!!this.prev&&this.prev.has(e)}get forest(){return this.tree.forest}make(e){return new BranchMap(this.tree,e)}ensureCurrentScope(){if(this.forest.currentScope&&this.forest.currentScope.status===enums_1.Status_s.pending&&!this.tree.activeScopeCauseIDs.has(this.forest.currentScope.scopeID)){if(this.tree.top!=this.tree.top)return this.tree.top?.ensureCurrentScope();var e=this.forest["currentScope"];this.next=new BranchMap(this.tree,{cause:e.cause,status:e.status,causeID:e.scopeID,prev:this}),this.tree.activeScopeCauseIDs.add(e.scopeID),e.inTrees.add(this.tree.name)}}set(e,t){var s=this.tree.top;if(this!==s)return s?.set(e,t);this.ensureCurrentScope();s=this.make({data:new Map([[e,t]]),cause:enums_1.Action_s.set});this.push(s)}del(e){if(this.next)return this.next.del(e);e=this.make({data:new Map([[e,constants_1.DELETED]]),cause:enums_1.Action_s.del});this.push(e)}change(e){if((0,isTreeSet_1.isTreeSet)(e))this.set(e.key,e.val);else{if(!(0,isTreeDel_1.isTreeDel)(e))throw new Error("cannot implement change "+e.type.toString());this.del(e.key)}return{treeName:e.treeName,change:e,status:enums_1.Status_s.good}}}exports.BranchMap=BranchMap;